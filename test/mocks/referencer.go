// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/firebase/users.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	db "firebase.google.com/go/db"
	gomock "github.com/golang/mock/gomock"
)

// MockReferencer is a mock of Referencer interface.
type MockReferencer struct {
	ctrl     *gomock.Controller
	recorder *MockReferencerMockRecorder
}

// MockReferencerMockRecorder is the mock recorder for MockReferencer.
type MockReferencerMockRecorder struct {
	mock *MockReferencer
}

// NewMockReferencer creates a new mock instance.
func NewMockReferencer(ctrl *gomock.Controller) *MockReferencer {
	mock := &MockReferencer{ctrl: ctrl}
	mock.recorder = &MockReferencerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferencer) EXPECT() *MockReferencerMockRecorder {
	return m.recorder
}

// NewRef mocks base method.
func (m *MockReferencer) NewRef(path string) *db.Ref {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRef", path)
	ret0, _ := ret[0].(*db.Ref)
	return ret0
}

// NewRef indicates an expected call of NewRef.
func (mr *MockReferencerMockRecorder) NewRef(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRef", reflect.TypeOf((*MockReferencer)(nil).NewRef), path)
}
