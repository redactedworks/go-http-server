// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/firebase/references.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "firebase.google.com/go/db"
	gomock "github.com/golang/mock/gomock"
	firebase "github.com/readactedworks/go-http-server/pkg/firebase/references"
)

// MockReferenceCreator is a mock of Creator interface.
type MockReferenceCreator struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceCreatorMockRecorder
}

// MockReferenceCreatorMockRecorder is the mock recorder for MockReferenceCreator.
type MockReferenceCreatorMockRecorder struct {
	mock *MockReferenceCreator
}

// NewMockReferenceCreator creates a new mock instance.
func NewMockReferenceCreator(ctrl *gomock.Controller) *MockReferenceCreator {
	mock := &MockReferenceCreator{ctrl: ctrl}
	mock.recorder = &MockReferenceCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceCreator) EXPECT() *MockReferenceCreatorMockRecorder {
	return m.recorder
}

// NewRef mocks base method.
func (m *MockReferenceCreator) NewRef(path string) firebase.Operator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRef", path)
	ret0, _ := ret[0].(firebase.Operator)
	return ret0
}

// NewRef indicates an expected call of NewRef.
func (mr *MockReferenceCreatorMockRecorder) NewRef(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRef", reflect.TypeOf((*MockReferenceCreator)(nil).NewRef), path)
}

// MockReferenceOperator is a mock of Operator interface.
type MockReferenceOperator struct {
	ctrl     *gomock.Controller
	recorder *MockReferenceOperatorMockRecorder
}

// MockReferenceOperatorMockRecorder is the mock recorder for MockReferenceOperator.
type MockReferenceOperatorMockRecorder struct {
	mock *MockReferenceOperator
}

// NewMockReferenceOperator creates a new mock instance.
func NewMockReferenceOperator(ctrl *gomock.Controller) *MockReferenceOperator {
	mock := &MockReferenceOperator{ctrl: ctrl}
	mock.recorder = &MockReferenceOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferenceOperator) EXPECT() *MockReferenceOperatorMockRecorder {
	return m.recorder
}

// Child mocks base method.
func (m *MockReferenceOperator) Child(path string) *db.Ref {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Child", path)
	ret0, _ := ret[0].(*db.Ref)
	return ret0
}

// Child indicates an expected call of Child.
func (mr *MockReferenceOperatorMockRecorder) Child(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Child", reflect.TypeOf((*MockReferenceOperator)(nil).Child), path)
}

// Delete mocks base method.
func (m *MockReferenceOperator) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReferenceOperatorMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReferenceOperator)(nil).Delete), ctx)
}

// Get mocks base method.
func (m *MockReferenceOperator) Get(ctx context.Context, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockReferenceOperatorMockRecorder) Get(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReferenceOperator)(nil).Get), ctx, v)
}

// GetIfChanged mocks base method.
func (m *MockReferenceOperator) GetIfChanged(ctx context.Context, etag string, v interface{}) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIfChanged", ctx, etag, v)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIfChanged indicates an expected call of GetIfChanged.
func (mr *MockReferenceOperatorMockRecorder) GetIfChanged(ctx, etag, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIfChanged", reflect.TypeOf((*MockReferenceOperator)(nil).GetIfChanged), ctx, etag, v)
}

// GetShallow mocks base method.
func (m *MockReferenceOperator) GetShallow(ctx context.Context, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShallow", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetShallow indicates an expected call of GetShallow.
func (mr *MockReferenceOperatorMockRecorder) GetShallow(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShallow", reflect.TypeOf((*MockReferenceOperator)(nil).GetShallow), ctx, v)
}

// GetWithETag mocks base method.
func (m *MockReferenceOperator) GetWithETag(ctx context.Context, v interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithETag", ctx, v)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithETag indicates an expected call of GetWithETag.
func (mr *MockReferenceOperatorMockRecorder) GetWithETag(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithETag", reflect.TypeOf((*MockReferenceOperator)(nil).GetWithETag), ctx, v)
}

// OrderByChild mocks base method.
func (m *MockReferenceOperator) OrderByChild(child string) *db.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderByChild", child)
	ret0, _ := ret[0].(*db.Query)
	return ret0
}

// OrderByChild indicates an expected call of OrderByChild.
func (mr *MockReferenceOperatorMockRecorder) OrderByChild(child interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByChild", reflect.TypeOf((*MockReferenceOperator)(nil).OrderByChild), child)
}

// OrderByKey mocks base method.
func (m *MockReferenceOperator) OrderByKey() *db.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderByKey")
	ret0, _ := ret[0].(*db.Query)
	return ret0
}

// OrderByKey indicates an expected call of OrderByKey.
func (mr *MockReferenceOperatorMockRecorder) OrderByKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByKey", reflect.TypeOf((*MockReferenceOperator)(nil).OrderByKey))
}

// OrderByValue mocks base method.
func (m *MockReferenceOperator) OrderByValue() *db.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderByValue")
	ret0, _ := ret[0].(*db.Query)
	return ret0
}

// OrderByValue indicates an expected call of OrderByValue.
func (mr *MockReferenceOperatorMockRecorder) OrderByValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderByValue", reflect.TypeOf((*MockReferenceOperator)(nil).OrderByValue))
}

// Parent mocks base method.
func (m *MockReferenceOperator) Parent() *db.Ref {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(*db.Ref)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockReferenceOperatorMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockReferenceOperator)(nil).Parent))
}

// Push mocks base method.
func (m *MockReferenceOperator) Push(ctx context.Context, v interface{}) (*db.Ref, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, v)
	ret0, _ := ret[0].(*db.Ref)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push.
func (mr *MockReferenceOperatorMockRecorder) Push(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockReferenceOperator)(nil).Push), ctx, v)
}

// Set mocks base method.
func (m *MockReferenceOperator) Set(ctx context.Context, v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockReferenceOperatorMockRecorder) Set(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockReferenceOperator)(nil).Set), ctx, v)
}

// SetIfUnchanged mocks base method.
func (m *MockReferenceOperator) SetIfUnchanged(ctx context.Context, etag string, v interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIfUnchanged", ctx, etag, v)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIfUnchanged indicates an expected call of SetIfUnchanged.
func (mr *MockReferenceOperatorMockRecorder) SetIfUnchanged(ctx, etag, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIfUnchanged", reflect.TypeOf((*MockReferenceOperator)(nil).SetIfUnchanged), ctx, etag, v)
}

// Transaction mocks base method.
func (m *MockReferenceOperator) Transaction(ctx context.Context, fn db.UpdateFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockReferenceOperatorMockRecorder) Transaction(ctx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockReferenceOperator)(nil).Transaction), ctx, fn)
}

// Update mocks base method.
func (m *MockReferenceOperator) Update(ctx context.Context, v map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReferenceOperatorMockRecorder) Update(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReferenceOperator)(nil).Update), ctx, v)
}
